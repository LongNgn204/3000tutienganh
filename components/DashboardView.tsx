import React, { useMemo } from 'react';
import type { User, StudyProgress, Category, ViewMode, CEFRLevel } from '../types';

const CEFR_LEVEL_MAP: Record<CEFRLevel, string> = {
    'A1': 'A1 - M·ªõi b·∫Øt ƒë·∫ßu',
    'A2': 'A2 - S∆° c·∫•p',
    'B1': 'B1 - Trung c·∫•p',
    'B2': 'B2 - Trung cao c·∫•p',
    'C1': 'C1 - Cao c·∫•p',
    'C2': 'C2 - Th√†nh th·∫°o',
};

interface SkillCardProps {
    title: string;
    description: string;
    icon: string;
    onClick: () => void;
    buttonText: string;
}

const SkillCard: React.FC<SkillCardProps> = ({ title, description, icon, onClick, buttonText }) => (
    <div className="bg-white p-6 rounded-xl shadow-lg flex flex-col hover:shadow-xl transition-shadow duration-300 border border-slate-200">
        <div className="flex items-start gap-4">
            <div className="text-3xl">{icon}</div>
            <div>
                <h3 className="text-lg font-bold text-slate-800">{title}</h3>
                <p className="text-sm text-slate-500 mt-1 h-10">{description}</p>
            </div>
        </div>
        <div className="mt-auto pt-4">
            <button
                onClick={onClick}
                className="w-full px-4 py-2 bg-blue-100 text-blue-800 font-semibold rounded-lg hover:bg-blue-200 transition-colors"
            >
                {buttonText}
            </button>
        </div>
    </div>
);


interface DashboardViewProps {
  currentUser: User | null;
  studyProgress: StudyProgress;
  categories: Category[];
  navigateTo: (mode: ViewMode, options?: { initialFilter: 'review' | 'unknown' }) => void;
}

const DashboardView: React.FC<DashboardViewProps> = ({ currentUser, studyProgress, categories, navigateTo }) => {

    const allWordsCount = useMemo(() => categories.flatMap(c => c.words).length, [categories]);

    const stats = useMemo(() => {
        const progressValues = Object.values(studyProgress);
        const knownCount = progressValues.filter(s => s === 'known').length;
        const reviewCount = progressValues.filter(s => s === 'review').length;
        return { knownCount, reviewCount };
    }, [studyProgress]);

    if (!currentUser) {
      return (
        <div className="flex-1 flex items-center justify-center text-center py-20 px-4">
          <div>
            <h2 className="text-3xl font-bold text-slate-700">Ch√†o m·ª´ng ƒë·∫øn v·ªõi H·ªçc Ti·∫øng Anh C√πng AI</h2>
            <p className="text-slate-500 mt-2 max-w-md mx-auto">Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ b·∫Øt ƒë·∫ßu l·ªô tr√¨nh h·ªçc ƒë∆∞·ª£c c√° nh√¢n h√≥a d√†nh ri√™ng cho b·∫°n.</p>
          </div>
        </div>
      );
    }

    return (
        <div className="flex-1 w-full max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
            <div className="bg-white p-6 rounded-xl shadow-md border border-slate-200 mb-8">
                <h2 className="text-3xl font-bold text-slate-800">
                    Ch√†o m·ª´ng tr·ªü l·∫°i, <span className="text-blue-600">{currentUser.name}!</span>
                </h2>
                <p className="text-slate-600 mt-2">
                    Tr√¨nh ƒë·ªô hi·ªán t·∫°i c·ªßa b·∫°n: <span className="font-semibold bg-blue-100 text-blue-800 px-2 py-1 rounded-full">{CEFR_LEVEL_MAP[currentUser.level]}</span>
                </p>
            </div>
            
            <h3 className="text-2xl font-bold text-slate-800 mb-6">L·ªô tr√¨nh h·ªçc t·∫≠p c·ªßa b·∫°n</h3>

            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                <SkillCard 
                    title="T·ª´ V·ª±ng & ƒê·ªçc Hi·ªÉu"
                    description={`ƒê√£ h·ªçc ${stats.knownCount}/${allWordsCount} t·ª´. ${stats.reviewCount} t·ª´ c·∫ßn √¥n t·∫≠p.`}
                    icon="üìñ"
                    onClick={() => navigateTo('flashcard')}
                    buttonText="√în t·∫≠p Flashcard"
                />
                <SkillCard 
                    title="Luy·ªán N√≥i AI"
                    description="Th·ª±c h√†nh giao ti·∫øp trong c√°c t√¨nh hu·ªëng th·ª±c t·∫ø."
                    icon="üí¨"
                    onClick={() => navigateTo('conversation')}
                    buttonText="B·∫Øt ƒë·∫ßu h·ªôi tho·∫°i"
                />
                 <SkillCard 
                    title="Luy·ªán Vi·∫øt AI"
                    description="X√¢y d·ª±ng c√¢u chuy·ªán t·ª´ c√°c t·ª´ v·ª±ng ƒë√£ ch·ªçn."
                    icon="‚úçÔ∏è"
                    onClick={() => navigateTo('story')}
                    buttonText="Vi·∫øt truy·ªán ng·∫Øn"
                />
                 <SkillCard 
                    title="Ki·ªÉm tra & C·ªßng c·ªë"
                    description="L√†m c√°c b√†i tr·∫Øc nghi·ªám ƒë·ªÉ c·ªßng c·ªë ki·∫øn th·ª©c."
                    icon="üéØ"
                    onClick={() => navigateTo('quiz')}
                    buttonText="L√†m b√†i tr·∫Øc nghi·ªám"
                />
                <SkillCard 
                    title="Tra c·ª©u & Kh√°m ph√°"
                    description="Kh√°m ph√° to√†n b·ªô danh s√°ch t·ª´ v√† gi·∫£i th√≠ch c·ªßa AI."
                    icon="üß†"
                    onClick={() => navigateTo('list')}
                    buttonText="Xem danh s√°ch t·ª´"
                />
                <div className="bg-slate-100 p-6 rounded-xl flex flex-col items-center justify-center text-center border-2 border-dashed border-slate-300">
                    <h3 className="text-lg font-bold text-slate-600">S·∫Øp ra m·∫Øt</h3>
                    <p className="text-sm text-slate-500 mt-1">C√°c module Luy·ªán Nghe v√† Ng·ªØ ph√°p chuy√™n s√¢u s·∫Ω s·ªõm ƒë∆∞·ª£c c·∫≠p nh·∫≠t!</p>
                    <div className="text-3xl mt-3">üéßüìù</div>
                </div>
            </div>

        </div>
    );
};

export default DashboardView;
